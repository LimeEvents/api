scalar Url

type Query {
  node(id: ID!): Node
  performer(id: ID!): Performer
  performers(filter: PerformerFilter, first: Int, last: Int, before: String, after: String): PerformerConnection
  stream(id: ID, first: Int, last: Int, before: String, after: String): LogConnection
}

type Mutation {
  registerPerformer(input: RegisterPerformerInput!): RegisterPerformerResponse
  updatePerformer(input: UpdatePerformerInput!): UpdatePerformerResponse
  removePerformer(input: RemovePerformerInput!): RemovePerformerResponse
}

input PerformerFilter {
  id: [ ID! ]
}

input RegisterPerformerInput {
  clientMutationId: ID!
  id: ID
  name: String!
  caption: String
  description: String
  images: [ Url! ]
  videos: [ Url! ]
}
type RegisterPerformerResponse {
  clientMutationId: ID!
  performer: Performer!
}
input UpdatePerformerInput {
  clientMutationId: ID!
  id: ID!
  name: String!
  caption: String
  description: String
  images: [ Url! ]
  videos: [ Url! ]
}
type UpdatePerformerResponse {
  clientMutationId: ID!
  performer: Performer!
}
input RemovePerformerInput {
  clientMutationId: ID!
  id: ID!
}
type RemovePerformerResponse {
  clientMutationId: ID!
  performer: Performer!
}

type PerformerConnection {
  pageInfo: PageInfo!
  edges: [ PerformerEdge! ]!
}

type PerformerEdge {
  cursor: String!
  node: Performer!
}

type Performer implements Node {
  id: ID!
  name: String!
  caption: String
  description: String
  images: [ Url! ]!
  videos: [ Url! ]!
  history(first: Int, last: Int, before: String, after: String): LogConnection
}

type LogConnection {
  pageInfo: PageInfo!
  edges: [ PerformerLogEdge! ]!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
}

type PerformerLogEdge {
  cursor: String!
  node: Performer!
}

type PerformerLog implements Log & Node {
  id: ID!
  type: PerformerLogType
  performer: Performer
  hash: String!
}

interface Node {
  id: ID!
}

interface Log {
  id: ID!
  hash: String!
}

enum PerformerLogType {
  PerformerRegistered
  PerformerUpdated
  PerformerRemoved
}
