# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: ecommerce

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs8.10

# you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
  environment:
    MONGODB_URL: mongodb://ticketing:F30TpCTSO7UQpH1l@stage-lime-events-shard-00-00-fkjou.mongodb.net:27017,stage-lime-events-shard-00-01-fkjou.mongodb.net:27017,stage-lime-events-shard-00-02-fkjou.mongodb.net:27017/test?ssl=true&replicaSet=stage-lime-events-shard-0&authSource=admin&retryWrites=true
    PRODUCT_API: ${self:service}-product-${self:provider.stage}
    PRODUCT_SINK: ${self:service}-product-sink-${self:provider.stage}
    LOCATION_SOURCE_TABLE: ${self:service}-source-${self:provider.stage}
    LOCATION_OPENED_TOPIC: LocationOpened-${self:provider.stage}
    LOCATION_UPDATED_TOPIC: LocationUpdated-${self:provider.stage}
    LOCATION_CLOSED_TOPIC: LocationClosed-${self:provider.stage}

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  product-api:
    handler: services/product/handler.graphql
    name: ${self:provider.environment.PRODUCT_API}
  product-sink:
    handler: services/product/handler.sink
    name: ${self:provider.environment.PRODUCT_SINK}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#   Resources:
#     LocationOpenedTopic:
#       Type: AWS::SNS::Topic
#       Properties:
#         DisplayName: Location Opened
#         TopicName: ${self:provider.environment.LOCATION_OPENED_TOPIC}
#     LocationUpdatedTopic:
#       Type: AWS::SNS::Topic
#       Properties:
#         DisplayName: Location Updated
#         TopicName: ${self:provider.environment.LOCATION_UPDATED_TOPIC}
#     LocationClosedTopic:
#       Type: AWS::SNS::Topic
#       Properties:
#         DisplayName: Location Closed
#         TopicName: ${self:provider.environment.LOCATION_CLOSED_TOPIC}
#     LocationSourceTable:
#       Type: AWS::DynamoDB::Table
#       Properties:
#         TableName: ${self:provider.environment.LOCATION_SOURCE_TABLE}
#         AttributeDefinitions:
#           - AttributeName: id
#             AttributeType: S
#           - AttributeName: _timestamp
#             AttributeType: N
#         KeySchema:
#           - AttributeName: id
#             KeyType: HASH
#           - AttributeName: _timestamp
#             KeyType: RANGE
#         ProvisionedThroughput:
#           ReadCapacityUnits: 1
#           WriteCapacityUnits: 1
